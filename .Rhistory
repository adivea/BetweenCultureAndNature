combined$name <- c(rep("H",21), rep("O", 166))
b_u_ppp <- as.ppp(combined)
combined
combined
st_coordinates(hist_baths)
combined <- c(st_coordinates(hist_baths),st_coordinates(baths_osm))
combined
combined <- cbind(st_coordinates(hist_baths),st_coordinates(baths_osm))
combined <- rbind(st_coordinates(hist_baths),st_coordinates(baths_osm))
combined
combined$name <- c(rep("H",21), rep("O", 166))
combined
combined <- rbind(st_coordinates(hist_baths),st_coordinates(baths_osm))
View(combined)
(st_coordinates(hist_baths),"H")
c(st_coordinates(hist_baths),"H")
combined <- rbind(st_coordinates(hist_baths),
st_coordinates(baths_osm))
combined
combined$name
c(rep("H",21), rep("O", 166))
combined$name <- c(rep("H",21), rep("O", 166))
combined <- rbind(st_coordinates(hist_baths),
st_coordinates(baths_osm))
combined <- data.frame(st_coordinates(hist_baths),
st_coordinates(baths_osm))
combined <- data.frame(rbind(st_coordinates(hist_baths),
st_coordinates(baths_osm)))
combined$name <- c(rep("H",21), rep("O", 166))
b_u_ppp <- as.ppp(combined)
b_c <- st_as_sf(combined, coords = c("X","Y"), crs = 32632)
b_ppp <- as.ppp(b_c)
plot(b_ppp)
nn.sim = vector()
P.r = b_ppp
for(i in 1:999){
marks(P.r) = sample(b_ppp$marks)  # Reassign labels at random, point locations don't change
nn.sim[i] = mean(nncross(split(P.r)$A,split(P.r)$B)$dist)
}
for(i in 1:999){
marks(P.r) = sample(b_ppp$marks)  # Reassign labels at random, point locations don't change
nn.sim[i] = mean(nncross(split(P.r)$O,split(P.r)$H)$dist)
}
plot(split(b_ppp))
b_ppp
combined$name <- c(rep("H",21), rep("O", 166))
combined$name <- factor(c(rep("H",21), rep("O", 166)))
b_c <- st_as_sf(combined, coords = c("X","Y"), crs = 32632)
b_ppp <- as.ppp(b_c)
plot(split(b_ppp))
nn.sim = vector()
P.r = b_ppp
for(i in 1:999){
marks(P.r) = sample(b_ppp$marks)  # Reassign labels at random, point locations don't change
nn.sim[i] = mean(nncross(split(P.r)$O,split(P.r)$H)$dist)
}
hist(nn.sim,breaks=30)
abline(v=mean(nncross(split(P)$A,split(P)$B)$dist),col="red")
hist(nn.sim,breaks=30)
abline(v=mean(nncross(split(b_ppp)$O,split(b_ppp)$H)$dist),col="red")
nn.sim.ecdf = ecdf(nn.sim)
nn.sim.ecdf(mean(nncross(split(b_ppp)$O,split(b_ppp)$H)$dist))
nncross(split(P.r)$O,split(P.r)$H)
nncross(split(b_ppp)$O,split(b_ppp)$H)$dist
nn.sim.ecdf  <-  ecdf(nn.sim)
hist(nn.sim.ecdf,breaks=30)
nn.sim.ecdf
P.r <-  b_ppp
hist(nn.sim,breaks=30)
abline(v=mean(nncross(split(b_ppp)$O,split(b_ppp)$H)$dist),col="red")
library('geosphere')
install.packages('geosphere')
library('geosphere')
# Get SpatialPolygonsDataFrame object example
pols<- getData('GADM', country = 'DK', level = 2)
# Get SpatialPolygonsDataFrame object example
pols<- getData('GADM', country = 'DK', level = 2)
library('raster')
library('geosphere')
library('mapview')
library(maptools)
library(rgeos)
library(sf)
# Get SpatialPolygonsDataFrame object example
pols<- getData('GADM', country = 'DK', level = 2)
#Project to suitable projection (to be able to calculate area, see later
utm32 = "+proj=utm +zone=32 +ellps=WGS84 +units=m +no_defs"
pols <- spTransform(pols, CRS(utm32))
mapview(pols)
pols
nn.sim.ecdf  <-  ecdf(nn.sim)
nn.sim.ecdf
mean(nn.sim.ecdf())
mean(nn.sim.ecdf)
kcross <- Kcross(b_ppp, i="O",j="H",r=rc, correction='none')
# Set intervals for moving window
rc <- seq(500, 2000, 100)
# Run the K function
kcross <- Kcross(b_ppp, i="O",j="H",r=rc, correction='none')
# Set intervals for moving window
rc <- seq(0, 2000, 100)
# Run the K function
kcross <- Kcross(b_ppp, i="O",j="H",r=rc, correction='none')
plot(kcross)
# Run the K function
kcross <- Kcross(b_ppp, i="O",j="H", correction='none')
plot(kcross)
rlabel(b_ppp)
kmult <- envelope(b_ppp, fun=Kcross,
nsim=100, i="O", j="H",
r=rc,
correction='none', simulate=expression(rlabel(b_ppp)))
plot(kmult,main="Cross-K function")
plot(kcross)
kmult <- envelope(b_ppp, fun=Kcross,
nsim=100, i="O", j="H",
r=rc,
correction='none', simulate=expression(rlabel(b_ppp)))
plot(kmult,main="Cross-K function")
kmult <- envelope(b_ppp, fun=Kcross,
nsim=100, i="O", j="H",
#r=rc,
correction='none') #simulate=expression(rlabel(b_ppp)))
plot(kmult,main="Cross-K function")
expression(rlabel(b_ppp))
plot(kcross)
plot(kmult, main="Cross-K function")
kmult <- envelope(b_ppp, fun=Kcross,
nsim=100, i="O", j="H",
#r=rc,
correction='none', simulate=expression(rlabel(b_ppp)))  # are the two patterns behaving similarly at different scales
plot(kmult, main="Cross-K function")
expression(rlabel(b_ppp))
rlabel(b_ppp)
expression(rlabel(b_ppp))
simulate=expression(rlabel(b_ppp))
plot(kcross)
plot(kmult, main="Cross-K function")
# Run the K function
?Kross()
# Run the K function
kcross <- Kcross(b_ppp, i="H",j="O",
#r=rc,
correction='none')
plot(kcross)
kmult <- envelope(b_ppp, fun=Kcross,
nsim=100, i="H", j="O",
#r=rc,
correction='none', simulate=expression(rlabel(b_ppp)))  # are the two patterns similarly clustered or dispersed at different scales
plot(kmult, main="Cross-K function")
library(tmap)
tm_shape(wc_spatial) +
tm_facets(by = "year")+
tm_borders(col = "black",
lwd = 1) +
tm_polygons("pct_bath",
style = "pretty",
title = "% of flats with <br>access to bath")+
tm_layout(main.title = "Percentage of flats with access to a bath", legend.outside = TRUE)
library(tmap)
tm_shape(wc_spatial) +
tm_facets(by = "year")+
tm_borders(col = "black",
lwd = 1) +
tm_polygons("pct_bath",
style = "pretty",
title = "% of flats with /n access to bath")+
tm_layout(main.title = "Percentage of flats with access to a bath", legend.outside = TRUE)
library(tmap)
tm_shape(wc_spatial) +
tm_facets(by = "year")+
tm_borders(col = "black",
lwd = 1) +
tm_polygons("pct_bath",
style = "pretty",
title = "% of flats with \n access to bath")+
tm_layout(main.title = "Percentage of flats with access to a bath", legend.outside = TRUE)
library(tmap)
tm_shape(wc_spatial) +
tm_facets(by = "year")+
#tm_borders(col = "black",
#           lwd = 1) +
tm_polygons("pct_bath",
style = "pretty",
title = "% of flats with \n access to bath")+
tm_layout(main.title = "Percentage of flats with access to a bath", legend.outside = TRUE)
library(tmap)
tm_shape(wc_spatial) +
tm_facets(by = "year")+
# tm_borders(col = "black",
#            lwd = 1) +
tm_polygons("pct_wc",
style = "pretty",
title = "% of flats with <br>access to WC")+
tm_layout(main.title = "Percentage of flats with access to WC",
legend.outside = TRUE)
library(sf)
library(tidyverse)
library(spatstat)
library(spatialkernel)
library(googlesheets4)
library(leaflet)
suburbs <- st_read("data/bydel.shp")
plot(suburbs$geometry)
tail(suburbs)
#write_rds(suburbs, "data/CPHsuburbs.rds")
suburbs$id
#Clean up suburb names
suburbs$navn
suburbs %>%
select(navn) %>%
mutate(Name=gsub("<f8>|<d8>","oe",navn))
wc <- read_sheet("https://docs.google.com/spreadsheets/d/1iFvycp6M6bF8GBkGjA2Yde2yCIhiy5_slAkGF-RUF7w/edit#gid=0",
col_types = "cnnnnnnnn")
wc
saveRDS(wc, wc.rds)
saveRDS(wc, "data/wc.rds")
wc <- read_rds("data/wc/rds")
wc <- read_rds("data/wc/rds")
writeRDS(wc, "data/wc.rds")
write_rds(wc, "data/wc.rds")
wc <- read_rds("data/wc/rds")
getwd()
wc <- read_rds("data/wc/rds")
write_csv(wc, "data/wc.rds")
write_csv(wc, "data/wc.csv")
wc <- read_csv("data/wc.csv")
wc
wcdata <- wc %>%
group_by(year, suburb_id) %>%
summarize(flats = sum(flats),
bath = sum(bath),
pct_bath = bath/flats*100,
wc_access=sum(wc_access),
pct_wc= wc_access/flats*100,
warmH20=sum(hot_water),
pct_wH20=warmH20/flats*100,
communal_wc = sum(wc_communal_ct),
communal_bath = sum(bath_communal_ct))
wcdata
#write_rds(wcdata, "data/CPH_wcdata.rds")
wc_spatial <- suburbs %>%
merge(wcdata, by.x= "id",by.y ="suburb_id")
wc_spatial
names(wc_spatial)
wc1950 <- wc_spatial %>%
filter(year==1950)
tmap_mode(mode = "plot")
tm_shape(wc1950) +
#tm_facets(by = "year")+
tm_borders(col = "black",
lwd = 1) +
tm_polygons("flats",
style = "pretty")+
tm_legend(legend.position= c("RIGHT", "TOP"))+
tm_compass(position = c("RIGHT", "BOTTOM"),
type = "rose",
size = 2) +
tm_scale_bar(position = c("RIGHT", "BOTTOM"),
breaks = c(0, 2, 4),
text.size = 1) +
tm_credits(position = c("RIGHT", "BOTTOM"),
text = "Adela Sobotkova, 2021") +
tm_layout(main.title = "Copenhagen Flats",
legend.outside = FALSE)
library(tmap)
tmap_mode(mode = "view" )
tm_shape(wc_spatial) +
tm_facets(by = "year")+
tm_borders(col = "black",
lwd = 1) +
tm_polygons("flats",
style = "pretty")+
tm_layout(main.title = "Copenhagen Flats",
legend.outside = TRUE)
wc_spatial <- wc_spatial %>%
mutate(area_km2 = areal_m2/1000000,
flat_per_km = flats/area_km2)
library(tmap)
tmap_mode(mode = "view" )
tm_shape(wc_spatial) +
tm_facets(by = "year")+
tm_borders(col = "black",
lwd = 1) +
tm_polygons("flat_per_km",
style = "pretty")+
tm_layout(main.title = "Copenhagen Flats per sq km",
legend.outside = TRUE)
library(tmap)
tmap_mode(mode = "view" )
tm_shape(wc_spatial) +
tm_facets(by = "year")+
tm_borders(col = "black",
lwd = 1) +
tm_polygons("pct_bath",
style = "pretty",
title = "% of flats with \n access to bath")+
tm_layout(main.title = "Percentage of flats with access to a bath", legend.outside = TRUE)
library(tmap)
tmap_mode(mode = "view" )
tm_shape(wc_spatial) +
tm_facets(by = "year")+
# tm_borders(col = "black",
#            lwd = 1) +
tm_polygons("pct_wc",
style = "pretty",
title = "% of flats with <br>access to WC")+
tm_layout(main.title = "Percentage of flats with access to WC",
legend.outside = TRUE)
wc_spatial <- wc_spatial %>%
mutate(bath_per_km = bath/area_km2,
wc_per_km = wc_access/area_km2)
library(osmdata)
# Create a bounding box
bb  <- suburbs %>% st_transform(4326) %>% st_bbox()
plot(bb)
q <- opq(bbox = bb,timeout = 180)
qa  <- add_osm_feature(q, key = 'amenity',value = 'public_bath')
qb     <- add_osm_feature(q, key = 'amenity',value = 'drinking_water')
qc     <- add_osm_feature(q, key = 'amenity',value = 'shower')
qd     <- add_osm_feature(q, key = 'amenity',value = 'toilets')
qe     <- add_osm_feature(q, key = 'amenity',value = 'water_point')
public_bath <- c(osmdata_sf(qa),
osmdata_sf(qc),
osmdata_sf(qd))
public_bath
baths <- read_sheet("https://docs.google.com/spreadsheets/d/15i17dqdsRYv6tdboZIlxTmhdcaN-JtgySMXIXwb5WfE/edit#gid=0",
col_types = "ccnnncnnnc")
names(baths)
hist_bathhouses <- baths %>%
select(BathhouseName,Longitude,Latitude,Quality) %>%
filter(!is.na(Longitude)) %>%
st_as_sf(coords=c("Longitude", "Latitude"), crs = 4236)
names(baths)
baths
hist_bathhouses <- baths %>%
select(BathhouseName,Longitude,Latitude,Quality) %>%
filter(!is.na(Longitude)) %>%
st_as_sf(coords=c("Longitude", "Latitude"), crs = 4236)
library(tidyverse)
hist_bathhouses <- baths %>%
select(BathhouseName,Longitude,Latitude,Quality) %>%
filter(!is.na(Longitude)) %>%
st_as_sf(coords=c("Longitude", "Latitude"), crs = 4236)
baths %>%
select(BathhouseName,Longitude,Latitude,Quality)
hist_bathhouses <- baths %>%
dplyr::select(BathhouseName,Longitude,Latitude,Quality) %>%
filter(!is.na(Longitude)) %>%
st_as_sf(coords=c("Longitude", "Latitude"), crs = 4236)
hist_baths <- st_transform(hist_bathhouses, crs=32632)
write_rds(baths,"data/baths.rds")
# baths <- read_sheet("https://docs.google.com/spreadsheets/d/15i17dqdsRYv6tdboZIlxTmhdcaN-JtgySMXIXwb5WfE/edit#gid=0",
#                     col_types = "ccnnncnnnc")
# write_rds(baths,"data/baths.rds")
baths <- read_rds("data/baths.rds")
names(baths)
hist_bathhouses <- baths %>%
dplyr::select(BathhouseName,Longitude,Latitude,Quality) %>%
filter(!is.na(Longitude)) %>%
st_as_sf(coords=c("Longitude", "Latitude"), crs = 4236)
hist_baths <- st_transform(hist_bathhouses, crs=32632)
#test map
mapview(hist_baths, map.types = "Stamen.TonerLite",
#cex="radius", legend=FALSE,
col.regions="#217844", lwd=0, alpha=0.4)
# Set intervals for moving window (you don't have to)
rc <- seq(0, 3000, 100)
# Run the Kcross function
kcross <- Kcross(b_ppp, i="H",j="O",
r=rc,
correction='none')
library(spatstat)
# Prepare the ppp object
# Rebuild ppp from scratch via a combined sf object
st_coordinates(hist_baths)  # 21 coordinates
st_coordinates(baths_osm)   # 166 coordinates
library(osmdata)
# Create a bounding box
bb  <- suburbs %>% st_transform(4326) %>% st_bbox()
plot(bb)
q <- opq(bbox = bb,timeout = 180)
qa  <- add_osm_feature(q, key = 'amenity',value = 'public_bath')
qb     <- add_osm_feature(q, key = 'amenity',value = 'drinking_water')
qc     <- add_osm_feature(q, key = 'amenity',value = 'shower')
qd     <- add_osm_feature(q, key = 'amenity',value = 'toilets')
qe     <- add_osm_feature(q, key = 'amenity',value = 'water_point')
public_bath <- c(osmdata_sf(qa),
osmdata_sf(qc),
osmdata_sf(qd))
bath_uniq <- unique_osmdata(public_bath)
rpoint <- bath_uniq$osm_points %>%
filter(!is.na(amenity)) %>%
st_transform(32632) %>% select(name)
rpoint <- bath_uniq$osm_points %>%
filter(!is.na(amenity)) %>%
st_transform(32632) %>% dplyr::select(name)
rpoly  <- bath_uniq$osm_polygons %>%
st_transform(32632) %>%
dplyr::select(name)  %>% st_centroid()
baths_osm <- rbind(rpoly,rpoint)
baths_osm <- st_intersection(baths_osm, st_transform(suburbs, 32632) %>% st_geometry() %>% st_union())
# transform also historical baths
baths_cph <- wc_spatial%>%
st_centroid() %>%
st_transform(32632) %>%
mutate(radius = sqrt(bath_per_km)) %>%
arrange(desc(bath_per_km))
library(mapview)
map_osm <-  mapview(baths_osm, map.types = "OpenStreetMap",
col.regions = "#940000",
label = as.character(suburbs$name),
color = "white", legend = FALSE, layer.name = "Baths in OSM",
homebutton = FALSE, lwd = 0.5)
#test map
mapview(baths_cph[,-3], map.types = "Stamen.TonerLite", cex="radius", legend=FALSE,
col.regions="#217844", lwd=0, alpha=0.4)
map_cph <-  mapview(baths_cph[,-3],
map.types = "OpenStreetMap",
col.regions = "#940000",
color = "white",
cex = "bath_per_km",
legend = TRUE,
layer.name = "Baths per sq km <br>in suburbs from 1970",
homebutton = FALSE, lwd = 0.5)
sync(map_osm,map_cph)
# baths <- read_sheet("https://docs.google.com/spreadsheets/d/15i17dqdsRYv6tdboZIlxTmhdcaN-JtgySMXIXwb5WfE/edit#gid=0",
#                     col_types = "ccnnncnnnc")
# write_rds(baths,"data/baths.rds")
baths <- read_rds("data/baths.rds")
names(baths)
hist_bathhouses <- baths %>%
dplyr::select(BathhouseName,Longitude,Latitude,Quality) %>%
filter(!is.na(Longitude)) %>%
st_as_sf(coords=c("Longitude", "Latitude"), crs = 4236)
hist_baths <- st_transform(hist_bathhouses, crs=32632)
#test map
mapview(hist_baths, map.types = "Stamen.TonerLite",
#cex="radius", legend=FALSE,
col.regions="#217844", lwd=0, alpha=0.4)
library(mapview)
map_osm <-  mapview(baths_osm, map.types = "OpenStreetMap",
col.regions = "#940000",
label = as.character(suburbs$name),
color = "white", legend = FALSE, layer.name = "Baths in OSM",
homebutton = FALSE, lwd = 0.5)
map_hist <-  mapview(hist_baths,
map.types = "OpenStreetMap",
col.regions = "#940000",
color = "white",
# cex = "bath_per_km",
legend = TRUE,
layer.name = "Public bathhouses, early 20th century",
homebutton = FALSE, lwd = 0.5)
sync(map_osm,map_hist)
library(spatstat)
# Prepare the ppp object
# Rebuild ppp from scratch via a combined sf object
st_coordinates(hist_baths)  # 21 coordinates
st_coordinates(baths_osm)   # 166 coordinates
combined <- data.frame(rbind(st_coordinates(hist_baths),
st_coordinates(baths_osm)))
# Now I am ssigning marks which need to be a factor
combined$name <- factor(c(rep("H",21), rep("O", 166)))
# Create an sf object out of the dataframe
b_c <- st_as_sf(combined, coords = c("X","Y"), crs = 32632)
# Convert into a marked ppp and confirm by plotting
b_ppp <- as.ppp(b_c)
plot(split(b_ppp))
nn.sim  <-  vector() #create container for simulation data
P.r <-  b_ppp
for(i in 1:999){
marks(P.r)  <-  sample(b_ppp$marks)  # Reassign labels at random, point locations don't change
nn.sim[i]  <-  mean(nncross(split(P.r)$O,split(P.r)$H)$dist)
}
hist(nn.sim,breaks=30)
abline(v=mean(nncross(split(b_ppp)$O,split(b_ppp)$H)$dist),col="red")
nn.sim.ecdf  <-  ecdf(nn.sim)
# Set intervals for moving window (you don't have to)
rc <- seq(0, 3000, 100)
# Run the Kcross function
kcross <- Kcross(b_ppp, i="H",j="O",
r=rc,
correction='none')
plot(kcross)
kmult <- envelope(b_ppp, fun=Kcross,
nsim=100, i="H", j="O",
#r=rc,
correction='none', simulate=expression(rlabel(b_ppp)))  # are the two patterns similarly clustered or dispersed at different scales
plot(kmult, main="Cross-K function")
wc_spatial
library(tmap)
tmap_mode(mode = "view" )
tm_shape(wc_spatial) +
tm_facets(by = "year")+
# tm_borders(col = "black",
#            lwd = 1) +
tm_polygons("flat_per_km",
style = "pretty")+
tm_layout(main.title = "Copenhagen Flats per sq km",
legend.outside = TRUE)
library(tmap)
tmap_mode(mode = "view" )
tm_shape(wc_spatial) +
tm_facets(by = "year")+
tm_borders(col = "black",
lwd = 1) +
tm_polygons("pct_bath",
n=4,
style = "pretty",
title = "% of flats with \n access to bath")+
tm_layout(main.title = "Percentage of flats with access to a bath", legend.outside = TRUE)
